#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct Edge{
    int src, dest;
};

struct Graph {
    int V, E;
    struct Edge* edges;
};
int find(int parent[], int i){
    if (parent[i] == i)
        return i;
    return find(parent, parent[i]);
}

void Union(int parent[], int x, int y){
    int xset = find(parent, x);
    int yset = find(parent, y);
    parent[xset] = yset;
}

int kargerMinCut(struct Graph* graph){
    int V = graph->V;
    int E = graph->E;
    struct Edge* edges = graph->edges;
    int* parent = (int*)malloc(V * sizeof(int));
    int i;
    for (i = 0; i < V; ++i){
        parent[i] = i;
    }
    int vertices = V;
    while (vertices > 2){
  
        int randomEdge = rand() % E;

        int subset1 = find(parent, edges[randomEdge].src);
        int subset2 = find(parent, edges[randomEdge].dest);

        if (subset1 == subset2){
            continue;
        }
        Union(parent, subset1, subset2);

        vertices--;
    }

    int cutEdges = 0;
    for (i = 0; i < E; i++) {
        int subset1 = find(parent, edges[i].src);
        int subset2 = find(parent, edges[i].dest);
        if (subset1 != subset2)
            cutEdges++;
    }

    free(parent);

    return cutEdges;
}

int main() {
    char filename[100];
    printf("Enter the name of the CSV file: ");
    scanf("%s", filename);
    FILE* file = fopen(filename, "r");
    if (!file) {
        fprintf(stderr, "Error: Unable to open file.\n");
        return 1;
    }

    int V, E;
    fscanf(file, "%d,%d", &V, &E);

    struct Graph graph;
    graph.V = V;
    graph.E = E;
    graph.edges = (struct Edge*)malloc(E * sizeof(struct Edge));

    int i;
    for (i = 0; i < E; i++) {
        fscanf(file, "%d,%d", &graph.edges[i].src, &graph.edges[i].dest);
    }

    fclose(file);
    srand(time(NULL));

    int minCut = INT_MAX;
    int iterations = 1000; 
    for (i = 0; i < iterations; ++i) {
        int cut = kargerMinCut(&graph);
        if (cut < minCut){
            minCut = cut;
        }
    }

    printf("Minimum cut after %d iterations: %d\n", iterations, minCut);

    free(graph.edges);

    return 0;
}
